# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ktblvJmbQ8MN_RSCxV4xuAPLN-xymffG
"""

import pandas as pd
from statsmodels.tsa.stattools import adfuller
import plotly.express as px
import numpy as np
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from matplotlib import pyplot as plt
import statsmodels.graphics.tsaplots as tsa_plots
from sklearn.metrics import mean_squared_error
import pmdarima as pm
import statsmodels.api as sm

df = pd.read_csv("/content/drive/MyDrive/NSE Training Data - 1st Jan 2016 to 1st Jan 2022.csv")

df["Date"]=pd.to_datetime(df["Date"])

fig=px.scatter(df,x="Date",y="Close",color="Close")
fig.show()

fig=px.scatter(df,x="Date",y="High",color="High")
fig.show()

fig=px.scatter(df,x="Date",y="Low",color="Low")
fig.show()

df.describe()

df.isnull().sum()

df[df["Close"].isnull()]

loc=np.where(df["Close"].astype("str")=="nan")

for i in list(loc[0]):
    df["Close"][i]=(df["Close"][i-1]+df["Close"][i+1])/2
    df["Open"][i]=(df["Open"][i-1]+df["Open"][i+1])/2   
    df["High"][i]=(df["High"][i-1]+df["High"][i+1])/2
    df["Low"][i]=(df["Low"][i-1]+df["Low"][i+1])/2
    df["Adj Close"][i]=(df["Adj Close"][i-1]+df["Adj Close"][i+1])/2
    df["Volume"][i]=(df["Volume"][i-1]+df["Volume"][i+1])/2

df.isnull().sum()

adft_close = adfuller(df["Close"],autolag='AIC')
adft_close

rmean = df["Close"].rolling(12).mean()
df["rmean"]=rmean
fig=px.scatter(df,x="Date",y="rmean",color="rmean")
fig.show()

rstd = df["Close"].rolling(12).std()
df["rstd"]=rstd
fig=px.scatter(df,x="Date",y="rstd",color="rstd")
fig.show()

result = seasonal_decompose(df["Close"], model='multiplicative', freq = 12)
fig = plt.figure()  
fig = result.plot()  
fig.set_size_inches(16, 9)

df["close_log"]=np.log(df["Close"])
df["close_log_diff"]= df["close_log"]-df["close_log"].shift().dropna()

adft_close_log = adfuller(df["close_log"],autolag='AIC')
adft_close_log

adft_close_log_diff = adfuller(df["close_log_diff"].dropna(),autolag='AIC')
adft_close_log_diff

tsa_plots.plot_acf(df["Close"], lags = 12)

tsa_plots.plot_acf(df["close_log"],lags = 12)

tsa_plots.plot_acf(df["close_log_diff"].dropna(), lags = 12)

train=df["Close"].iloc[:1458,]
train

train_log_diff=df["close_log_diff"].iloc[1:1458,]
train_log_diff

test=df["Close"].iloc[1458:,]
test

ar_model = pm.auto_arima(train_log_diff, start_p=0, start_q=0,max_p=12, max_q=12, m=1,d=None,seasonal=False,start_P=0, trace=True,error_action='warn', stepwise=True)

model=sm.tsa.statespace.SARIMAX(train,order=(3, 0, 5),seasonal_order=(3,0,5,12))

results=model.fit()

